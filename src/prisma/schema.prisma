// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
//  Modelos de Autenticación y Usuarios
// =================================

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String // En el futuro, aquí guardaremos el hash de la contraseña
  role      Role      @default(USER)
  createdAt DateTime  @default(now())

  // Relaciones
  sessions  InventorySession[]
  ownedCompanies Company[] @relation("CompanyOwner")
  authoredNotes  Note[]    @relation("NoteAuthor")
  assignedTasks  Task[]    @relation("TaskAssignee")
  soldOrders     Order[]   @relation("OrderSeller")
}

enum Role {
  ADMIN    // Control total
  MANAGER  // Gestiona inventarios y usuarios
  SELLER   // Puede crear y modificar inventarios
  USER     // Rol básico, puede escanear y participar en sesiones
  READER   // Solo puede ver/leer datos
}


// =================================
//  Modelos de Inventario
// =================================

model InventorySession {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  
  // Relación con el usuario que creó la sesión
  userId    String
  user      User      @relation(fields: [userId], references: [id])

  // Relación con los items de la sesión
  items     InventoryItem[]
}

model InventoryItem {
  id          String   @id @default(uuid())
  key         String
  year        String
  pedimento   String
  description String
  line        String
  shelf       String
  position    String
  quantity    Int
  encoded     Boolean  @default(false)
  stock       Int?
  type        String
  createdAt   DateTime @default(now())

  // Relación con la sesión de inventario
  sessionId   String
  session     InventorySession @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, key], name: "sessionId_key")
  @@map("inventory_items")
}


// =================================
//  Modelos Auxiliares
// =================================

// Registros de escaneos individuales (opcional, para auditoría)
model ScanLog {
    id          String    @id @default(uuid())
    key         String
    year        String
    pedimento   String
    description String
    line        String
    shelf       String
    position    String
    quantity    Int?
    encoded     Boolean?
    type        String
    createdAt   DateTime @default(now())

    @@map("scan_logs")
}

// Catálogo de stock general
model StockItem {
    id        String   @id @default(uuid())
    key       String   @unique
    stock     Int
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@map("stock_items")
}

// =================================
//  Modelos de CRM
// =================================

model Company {
  id        String    @id @default(uuid())
  name      String
  // address   String?

  // --- Campos de Dirección Detallada ---
  street         String?
  exteriorNumber String?
  interiorNumber String?
  neighborhood   String?
  municipality   String?
  state          String?
  country        String?
  postalCode     String?

  phone     String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // --- Relación con el Propietario (Vendedor) ---
  ownerId        String?
  owner          User?     @relation("CompanyOwner", fields: [ownerId], references: [id])

  contacts  Contact[]
  notes     Note[]
  tasks     Task[]
  orders    Order[]

  @@map("companies")
}

model Contact {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String?   @unique
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relación con Compañía
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)

  orders    Order[]

  @@map("contacts")
}

// =================================
//  Modelos del Diseñador de Etiquetas
// =================================

model LabelTemplate {
  id        String    @id @default(uuid())
  name      String    @unique
  width     Int       // Ancho en mm
  height    Int       // Alto en mm
  elements  Json      // Aquí guardaremos la magia: un JSON con los elementos de la etiqueta
  previewImageUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("label_templates")

}

  enum TaskStatus {
  PENDING
  COMPLETED
}

// --- [NUEVO] Modelo para Notas ---
model Note {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  authorId  String
  author    User   @relation("NoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)
}

// --- [NUEVO] Modelo para Tareas ---
model Task {
  id        String     @id @default(cuid())
  title     String
  dueDate   DateTime?
  status    TaskStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  assigneeId String
  assignee   User     @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
}

// --- Añadir este ENUM para el estado de las órdenes ---
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// --- [NUEVO] Modelo para Órdenes ---
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Float
  orderDate   DateTime

  rev           String?
  invoiceNumber String?
  
  // Relación con el Vendedor
  sellerId    String?
  seller      User?       @relation("OrderSeller", fields: [sellerId], references: [id])

  // Relación con los artículos de la orden
  lineItems   OrderLineItem[]

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// --- [NUEVO] Modelo para los artículos de una orden ---
model OrderLineItem {
  id          String  @id @default(cuid())
  sku         String  // Código del producto
  description String
  quantity    Int
  unitCost    Float   // <<< [NUEVO] Costo por unidad
  purchaseOrder String? // Orden de Compra (OC)

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}