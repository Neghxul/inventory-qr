// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
//  Modelos de Autenticación y Usuarios
// =================================

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String // En el futuro, aquí guardaremos el hash de la contraseña
  role      Role      @default(USER)
  createdAt DateTime  @default(now())

  // Relaciones
  sessions  InventorySession[]
}

enum Role {
  ADMIN    // Control total
  MANAGER  // Gestiona inventarios y usuarios
  SELLER   // Puede crear y modificar inventarios
  USER     // Rol básico, puede escanear y participar en sesiones
  READER   // Solo puede ver/leer datos
}


// =================================
//  Modelos de Inventario
// =================================

model InventorySession {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  
  // Relación con el usuario que creó la sesión
  userId    String
  user      User      @relation(fields: [userId], references: [id])

  // Relación con los items de la sesión
  items     InventoryItem[]
}

model InventoryItem {
  id          String   @id @default(uuid())
  key         String
  year        String
  pedimento   String
  description String
  line        String
  shelf       String
  position    String
  quantity    Int
  encoded     Boolean  @default(false)
  stock       Int?
  type        String
  createdAt   DateTime @default(now())

  // Relación con la sesión de inventario
  sessionId   String
  session     InventorySession @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, key], name: "sessionId_key")
  @@map("inventory_items")
}


// =================================
//  Modelos Auxiliares
// =================================

// Registros de escaneos individuales (opcional, para auditoría)
model ScanLog {
    id          String    @id @default(uuid())
    key         String
    year        String
    pedimento   String
    description String
    line        String
    shelf       String
    position    String
    quantity    Int?
    encoded     Boolean?
    type        String
    createdAt   DateTime @default(now())

    @@map("scan_logs")
}

// Catálogo de stock general
model StockItem {
    id        String   @id @default(uuid())
    key       String   @unique
    stock     Int
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@map("stock_items")
}

// =================================
//  Modelos de CRM
// =================================

model Company {
  id        String    @id @default(uuid())
  name      String
  address   String?
  phone     String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]

  @@map("companies")
}

model Contact {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String?   @unique
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relación con Compañía
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@map("contacts")
}